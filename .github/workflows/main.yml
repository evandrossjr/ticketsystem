name: CI do Projeto de Tickets

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Rodar Testes com Maven
        run: mvn test

      #Análise de código SonarQube, PMD e SpotBugs
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=evandrossjr_ticketsystem
      - name: Run PMD
        run: mvn pmd:check
      - name: Run SpotBugs
        run: mvn spotbugs:check

  generate-diagram:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Passo 1: Construir a imagem Docker
      # O comando "docker build" procura o Dockerfile na raiz do projeto (ponto ".")
      - name: Construir a Imagem do Diagrama
        run: docker build -t diagrama-c4-image:latest .

      # Passo 2: Rodar o contêiner com a imagem recém-criada
      - name: Gerar Diagrama C4 no Contêiner
        run: docker run --rm -v $(pwd)/docs:/docs diagrama-c4-image:latest python /docs/diagram.py

      #verificação do arquivo gerado
      - name: Verificar Arquivo Gerado
        run: ls -la docs/

      # Passo 3: Salvar o artefato (a imagem gerada)
      - name: Salvar Diagrama Gerado
        uses: actions/upload-artifact@v4
        with:
          name: diagramas-c4
          path: docs/diagrama_tickets.png

      #Passo 4: Commit e Push do arquivo gerado para o repositório
      - name: Adicionar Imagem do Diagrama e Fazer Commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Docs: Atualiza diagrama C4 (run ${{ github.run_number }}) - ${{ github.sha }}"
          file_pattern: "docs/diagrama_tickets.png"

      # Passo 5: Publicar o artefato como uma release no GitHub
      - name: Criar Release no GitHub
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: "Release v1.0.${{ github.run_number }}"
          draft: false
          prerelease: false
      - name: Upload do Artefato para a Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docs/diagrama_tickets.png
          asset_name: diagrama_tickets.png
          asset_content_type: image/png
      - name: Confirmar Upload do Artefato
        run: echo "Diagrama C4 carregado na release com sucesso!"
      - name: Verificar a Release
        run: echo "Verifique a seção de releases do repositório para ver o diagrama C4."
