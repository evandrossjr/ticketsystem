name: CI do Projeto de Tickets

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Passo 1: Construir a imagem Docker
      # O comando "docker build" procura o Dockerfile na raiz do projeto (ponto ".")
      - name: Construir a Imagem do Diagrama
        run: docker build -t diagrama-c4-image:latest .

      # Passo 2: Rodar o contêiner com a imagem recém-criada
      - name: Gerar Diagrama C4 no Contêiner
        run: docker run --rm -v $(pwd)/docs:/docs diagrama-c4-image:latest python /docs/diagram.py

      # Passo 3: Salvar o artefato (a imagem gerada)
      - name: Salvar Diagrama Gerado
        uses: actions/upload-artifact@v4
        with:
          name: diagramas-c4
          path: docs/diagrama_tickets.png



      #Análise de código SonarQube, PMD e SpotBugs
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=evandrossjr_ticketsystem
      - name: Run PMD
        run: mvn pmd:check
      - name: Run SpotBugs
        run: mvn spotbugs:check